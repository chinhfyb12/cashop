[{"D:\\Pham Dinh Chinh\\kmon\\src\\index.js":"1","D:\\Pham Dinh Chinh\\kmon\\src\\App.js":"2","D:\\Pham Dinh Chinh\\kmon\\src\\common\\header\\Header.js":"3","D:\\Pham Dinh Chinh\\kmon\\src\\common\\footer\\Footer.js":"4","D:\\Pham Dinh Chinh\\kmon\\src\\components\\navbar\\Navbar.js":"5","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\home\\Home.js":"6","D:\\Pham Dinh Chinh\\kmon\\src\\components\\productsSlider\\ProductsSlider.js":"7","D:\\Pham Dinh Chinh\\kmon\\src\\components\\product\\Product.js":"8","D:\\Pham Dinh Chinh\\kmon\\src\\RouterURL.js":"9","D:\\Pham Dinh Chinh\\kmon\\src\\components\\routes\\routes.js":"10","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\login\\Login.js":"11","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\products\\Products.js":"12","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\signup\\SignUp.js":"13","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\productDetail\\ProductDetail.js":"14","D:\\Pham Dinh Chinh\\kmon\\src\\components\\products\\Products.js":"15","D:\\Pham Dinh Chinh\\kmon\\src\\store\\store.js":"16","D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\showCartReducer.js":"17","D:\\Pham Dinh Chinh\\kmon\\src\\store\\actions.js":"18","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\cart\\Cart.js":"19","D:\\Pham Dinh Chinh\\kmon\\src\\components\\search\\Search.js":"20","D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\showSearchReducer.js":"21","D:\\Pham Dinh Chinh\\kmon\\src\\common\\Slug.js":"22","D:\\Pham Dinh Chinh\\kmon\\src\\common\\formatMoney.js":"23","D:\\Pham Dinh Chinh\\kmon\\src\\common\\api\\productsAPI.js":"24","D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\sendPathProductReducer.js":"25","D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\sendProductsInCartReducer.js":"26"},{"size":293,"mtime":1611457706795,"results":"27","hashOfConfig":"28"},{"size":560,"mtime":1611474098255,"results":"29","hashOfConfig":"28"},{"size":5776,"mtime":1614179549351,"results":"30","hashOfConfig":"28"},{"size":1518,"mtime":1611317932254,"results":"31","hashOfConfig":"28"},{"size":22577,"mtime":1611739803038,"results":"32","hashOfConfig":"28"},{"size":7971,"mtime":1611848918488,"results":"33","hashOfConfig":"28"},{"size":2816,"mtime":1611738315706,"results":"34","hashOfConfig":"28"},{"size":2643,"mtime":1614069563193,"results":"35","hashOfConfig":"28"},{"size":1030,"mtime":1611649987703,"results":"36","hashOfConfig":"28"},{"size":4582,"mtime":1611397734787,"results":"37","hashOfConfig":"28"},{"size":712,"mtime":1611397894259,"results":"38","hashOfConfig":"28"},{"size":4726,"mtime":1614092834765,"results":"39","hashOfConfig":"28"},{"size":868,"mtime":1611418287868,"results":"40","hashOfConfig":"28"},{"size":12046,"mtime":1614069503458,"results":"41","hashOfConfig":"28"},{"size":1948,"mtime":1611738559792,"results":"42","hashOfConfig":"28"},{"size":567,"mtime":1611736036535,"results":"43","hashOfConfig":"28"},{"size":205,"mtime":1611455932683,"results":"44","hashOfConfig":"28"},{"size":433,"mtime":1611736235556,"results":"45","hashOfConfig":"28"},{"size":5676,"mtime":1611757876311,"results":"46","hashOfConfig":"28"},{"size":1634,"mtime":1611474068859,"results":"47","hashOfConfig":"28"},{"size":203,"mtime":1611473647108,"results":"48","hashOfConfig":"28"},{"size":836,"mtime":1611501236364,"results":"49","hashOfConfig":"28"},{"size":393,"mtime":1611501368010,"results":"50","hashOfConfig":"28"},{"size":1742,"mtime":1614087703218,"results":"51","hashOfConfig":"28"},{"size":234,"mtime":1611586596603,"results":"52","hashOfConfig":"28"},{"size":224,"mtime":1611736159388,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"zkf4oj",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},"D:\\Pham Dinh Chinh\\kmon\\src\\index.js",[],["114","115"],"D:\\Pham Dinh Chinh\\kmon\\src\\App.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\common\\header\\Header.js",["116","117"],"D:\\Pham Dinh Chinh\\kmon\\src\\common\\footer\\Footer.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\components\\navbar\\Navbar.js",["118"],"import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Col, Dropdown, Menu, Row, Divider, Badge, Button, Affix } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { DownOutlined, MenuUnfoldOutlined, ShoppingOutlined, UserOutlined, SearchOutlined, MenuFoldOutlined } from '@ant-design/icons';\r\nimport './Navbar.css';\r\nimport Slug from '../../common/Slug'\r\nimport { showCartModal, showSearch } from '../../store/actions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n//set menu\r\n\r\n//navbar desktop\r\nconst submenuBeauty = [\r\n    {\r\n        title: 'Face',\r\n        sub: ['Skin', 'Lip', 'Eyes']\r\n    },\r\n    {\r\n        title: 'Body',\r\n        sub: ['Hair', 'Body care']\r\n    },\r\n    {\r\n        title: 'Skin care',\r\n        sub: ['Cleansing', 'Mask park']\r\n    }\r\n]\r\nconst submenuPop = [\r\n    {\r\n        title: 'Boy Group',\r\n        sub: ['BT21']\r\n    },\r\n    {\r\n        title: 'Girl Group',\r\n        sub: ['Black Pink', 'Twice']\r\n    },\r\n]\r\nconst submenuDrama = [\r\n    {\r\n        title: 'Categories',\r\n        sub: ['Pengsoo', 'Book']\r\n    },\r\n]\r\nconst submenuFashion = [\r\n    {\r\n        title: 'Categories',\r\n        sub: ['Top', 'Bottom']\r\n    },\r\n    {\r\n        title: 'Brands',\r\n        sub: ['Fila']\r\n    },\r\n]\r\nconst submenuLife = [\r\n    {\r\n        title: 'Categories',\r\n        sub: ['Food', 'Game']\r\n    },\r\n]\r\n\r\nconst beautyMenuD = (\r\n    <Menu  className='navbar-submenu'>\r\n        {\r\n            submenuBeauty.map((menu, index) => {\r\n                return (\r\n                    <Menu.Item key={index}>\r\n                        <Link to={`/collections/k-beauty/${Slug(menu.title)}`}>\r\n                            <Menu>\r\n                                <Menu.SubMenu title={menu.title}>\r\n                                    {\r\n                                        menu.sub.map((item, index) => {\r\n                                            return (\r\n                                                <Menu.Item key={index}>\r\n                                                    <Link to={`/collections/k-beauty/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu.SubMenu>\r\n                            </Menu>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst popMenuD = (\r\n    <Menu className='navbar-submenu'>\r\n        {\r\n            submenuPop.map((menu, index) => {\r\n                return (\r\n                    <Menu.Item key={index}>\r\n                        <Link to={`/collections/k-pop/${Slug(menu.title)}`}>\r\n                            <Menu>\r\n                                <Menu.SubMenu title={menu.title}>\r\n                                    {\r\n                                        menu.sub.map((item, index) => {\r\n                                            return (\r\n                                                <Menu.Item key={index}>\r\n                                                    <Link to={`/collections/k-pop/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu.SubMenu>\r\n                            </Menu>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst dramaMenuD = (\r\n    <Menu className='navbar-submenu'>\r\n        {\r\n            submenuDrama.map((menu, index) => {\r\n                return (\r\n                    <Menu.Item key={index}>\r\n                        <Link to={`/collections/k-drama/${Slug(menu.title)}`}>\r\n                            <Menu>\r\n                                <Menu.SubMenu title={menu.title}>\r\n                                    {\r\n                                        menu.sub.map((item, index) => {\r\n                                            return (\r\n                                                <Menu.Item key={index}>\r\n                                                    <Link to={`/collections/k-drama/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu.SubMenu>\r\n                            </Menu>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst fashionMenuD = (\r\n    <Menu className='navbar-submenu'>\r\n        {\r\n            submenuFashion.map((menu, index) => {\r\n                return (\r\n                    <Menu.Item key={index}>\r\n                        <Link to={`/collections/k-fashion/${Slug(menu.title)}`}>\r\n                            <Menu>\r\n                                <Menu.SubMenu title={menu.title}>\r\n                                    {\r\n                                        menu.sub.map((item, index) => {\r\n                                            return (\r\n                                                <Menu.Item key={index}>\r\n                                                    <Link to={`/collections/k-fashion/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu.SubMenu>\r\n                            </Menu>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst lifeMenuD = (\r\n    <Menu className='navbar-submenu'>\r\n        {\r\n            submenuLife.map((menu, index) => {\r\n                return (\r\n                    <Menu.Item key={index}>\r\n                        <Link to={`/collections/k-life/${Slug(menu.title)}`}>\r\n                            <Menu>\r\n                                <Menu.SubMenu title={menu.title}>\r\n                                    {\r\n                                        menu.sub.map((item, index) => {\r\n                                            return (\r\n                                                <Menu.Item key={index}>\r\n                                                    <Link to={`/collections/k-life/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu.SubMenu>\r\n                            </Menu>\r\n                        </Link>\r\n                    </Menu.Item>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\n\r\n//navbar mobile\r\nconst beautyMenuM = (\r\n    <Menu className=\"nav-list_1_m\">\r\n        {\r\n            submenuBeauty.map((menu, index) => {\r\n                return (\r\n                    <>\r\n                        <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                            <Link to={`/collections/k-beauty/${Slug(menu.title)}`}>{menu.title}</Link>\r\n                            <p>\r\n                                <Dropdown overlay={(\r\n                                    <Menu className=\"nav-list_1_m\">\r\n                                        {\r\n                                            menu.sub.map((item, index) => {\r\n                                                return (\r\n                                                    <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                                                        <Link to={`/collections/k-beauty/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                    </Menu.Item>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Menu>\r\n                                )} trigger={['click']} >\r\n                                    <DownOutlined />\r\n                                </Dropdown>\r\n                            </p>\r\n                        </Menu.Item>\r\n                        {\r\n                            index < (submenuBeauty.length - 1) ? <Divider /> : ''\r\n                        }\r\n                    </>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst popMenuM = (\r\n    <Menu className=\"nav-list_1_m\">\r\n        {\r\n            submenuPop.map((menu, index) => {\r\n                return (\r\n                    <>\r\n                        <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                            <Link to={`/collections/k-pop/${Slug(menu.title)}`}>{menu.title}</Link>\r\n                            <p>\r\n                                <Dropdown overlay={(\r\n                                    <Menu className=\"nav-list_1_m\">\r\n                                        {\r\n                                            menu.sub.map((item, index) => {\r\n                                                return (\r\n                                                    <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                                                        <Link to={`/collections/k-pop/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                    </Menu.Item>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Menu>\r\n                                )} trigger={['click']} >\r\n                                    <DownOutlined />\r\n                                </Dropdown>\r\n                            </p>\r\n                        </Menu.Item>\r\n                        {\r\n                            index < (submenuPop.length - 1) ? <Divider /> : ''\r\n                        }\r\n                    </>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst dramaMenuM = (\r\n    <Menu className=\"nav-list_1_m\">\r\n        {\r\n            submenuDrama.map((menu, index) => {\r\n                return (\r\n                    <>\r\n                        <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                            <Link to={`/collections/k-drama/${Slug(menu.title)}`}>{menu.title}</Link>\r\n                            <p>\r\n                                <Dropdown overlay={(\r\n                                    <Menu className=\"nav-list_1_m\">\r\n                                        {\r\n                                            menu.sub.map((item, index) => {\r\n                                                return (\r\n                                                    <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                                                        <Link to={`/collections/k-drama/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                    </Menu.Item>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Menu>\r\n                                )} trigger={['click']} >\r\n                                    <DownOutlined />\r\n                                </Dropdown>\r\n                            </p>\r\n                        </Menu.Item>\r\n                        {\r\n                            index < (submenuDrama.length - 1) ? <Divider /> : ''\r\n                        }\r\n                    </>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst fashionMenuM = (\r\n    <Menu className=\"nav-list_1_m\">\r\n        {\r\n            submenuFashion.map((menu, index) => {\r\n                return (\r\n                    <>\r\n                        <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                            <Link to={`/collections/k-fashion/${Slug(menu.title)}`}>{menu.title}</Link>\r\n                            <p>\r\n                                <Dropdown overlay={(\r\n                                    <Menu className=\"nav-list_1_m\">\r\n                                        {\r\n                                            menu.sub.map((item, index) => {\r\n                                                return (\r\n                                                    <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                                                        <Link to={`/collections/k-fashion/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                    </Menu.Item>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Menu>\r\n                                )} trigger={['click']} >\r\n                                    <DownOutlined />\r\n                                </Dropdown>\r\n                            </p>\r\n                        </Menu.Item>\r\n                        {\r\n                            index < (submenuFashion.length - 1) ? <Divider /> : ''\r\n                        }\r\n                    </>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\nconst lifeMenuM = (\r\n    <Menu className=\"nav-list_1_m\">\r\n        {\r\n            submenuLife.map((menu, index) => {\r\n                return (\r\n                    <>\r\n                        <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                            <Link to={`/collections/k-life/${Slug(menu.title)}`}>{menu.title}</Link>\r\n                            <p>\r\n                                <Dropdown overlay={(\r\n                                    <Menu className=\"nav-list_1_m\">\r\n                                        {\r\n                                            menu.sub.map((item, index) => {\r\n                                                return (\r\n                                                    <Menu.Item key={index} className=\"nav-list_1_m_item\">\r\n                                                        <Link to={`/collections/k-life/${Slug(menu.title)}/${Slug(item)}`}>{item}</Link>\r\n                                                    </Menu.Item>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Menu>\r\n                                )} trigger={['click']} >\r\n                                    <DownOutlined />\r\n                                </Dropdown>\r\n                            </p>\r\n                        </Menu.Item>\r\n                        {\r\n                            index < (submenuLife.length - 1) ? <Divider /> : ''\r\n                        }\r\n                    </>\r\n                )\r\n            })\r\n        }\r\n    </Menu>\r\n)\r\n//end set menu\r\n\r\nconst Navbar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [quantity, setQuantity] = useState(0);\r\n\r\n    const cart = [...useSelector(state => state.productsInCart)]\r\n\r\n    useEffect(() => {\r\n        setQuantity(cart.length)\r\n    }, [cart])\r\n\r\n    const [visibleB, setVisibleB] = useState(false);\r\n    const [visibleP, setVisibleP] = useState(false);\r\n    const [visibleD, setVisibleD] = useState(false);\r\n    const [visibleF, setVisibleF] = useState(false);\r\n    const [visibleL, setVisibleL] = useState(false);\r\n\r\n    const handleVisibleChangeB  = flag => {\r\n        setVisibleB(flag)\r\n    }\r\n    const handleVisibleChangeP  = flag => {\r\n        setVisibleP(flag)\r\n    }\r\n    const handleVisibleChangeD  = flag => {\r\n        setVisibleD(flag)\r\n    }\r\n    const handleVisibleChangeF  = flag => {\r\n        setVisibleF(flag)\r\n    }\r\n    const handleVisibleChangeL  = flag => {\r\n        setVisibleL(flag)\r\n    }\r\n    //\r\n    const categories = [\r\n        {\r\n            name: 'k-beauty',\r\n            submenuD: beautyMenuD,\r\n            submenuM: beautyMenuM,\r\n            visible: visibleB,\r\n            action: handleVisibleChangeB\r\n        },\r\n        {\r\n            name: 'k-pop',\r\n            submenuD: popMenuD,\r\n            submenuM: popMenuM,\r\n            visible: visibleP,\r\n            action: handleVisibleChangeP\r\n        },\r\n        {\r\n            name: 'k-drama',\r\n            submenuD: dramaMenuD,\r\n            submenuM: dramaMenuM,\r\n            visible: visibleD,\r\n            action: handleVisibleChangeD\r\n        },\r\n        {\r\n            name: 'k-fashion',\r\n            submenuD: fashionMenuD,\r\n            submenuM: fashionMenuM,\r\n            visible: visibleF,\r\n            action: handleVisibleChangeF\r\n        },\r\n        {\r\n            name: 'k-life',\r\n            submenuD: lifeMenuD,\r\n            submenuM: lifeMenuM,\r\n            visible: visibleL,\r\n            action: handleVisibleChangeL\r\n        },\r\n    ]\r\n    //\r\n    const [isMenuShow, setMenuShow] = useState(false);\r\n\r\n    const onShowModalCard = useCallback(() => {\r\n        dispatch(showCartModal());\r\n    },[dispatch]);\r\n\r\n    const onShowSearch = useCallback(() => {\r\n        dispatch(showSearch());\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Affix offsetTop={0}>\r\n            <div className=\"navbar_root\">\r\n                <div className=\"container-fluid navbar\">\r\n                    <div className=\"navbar-nav_desktop\">\r\n                        <Row>\r\n                            <Col span={24}>\r\n                                <Menu className=\"nav-list\">\r\n                                    {\r\n                                        categories.map((category, index) => {\r\n                                            return (\r\n                                                <Menu.Item key={index} className=\"nav-list_item\">\r\n                                                    <Dropdown overlay={category.submenuD}>\r\n                                                        <Link to={`/collections/${category.name}`} className=\"ant-dropdown-link\">\r\n                                                            { category.name.toUpperCase() } <DownOutlined />\r\n                                                        </Link>\r\n                                                    </Dropdown>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <div className='navbar_mobile_tools'>\r\n                        <Row>\r\n                            <Col span={12}>\r\n                                <div className=\"box-tool\">\r\n                                    <Button onClick={ () => setMenuShow(!isMenuShow)}>\r\n                                        {\r\n                                            isMenuShow ? <MenuFoldOutlined /> : <MenuUnfoldOutlined />\r\n                                        }\r\n                                    </Button>\r\n                                </div>\r\n                            </Col>\r\n                            <Col span={12} className=\"tools_user\">\r\n                                <div className=\"box-tool\">\r\n                                    <Button onClick={onShowSearch}>\r\n                                        <SearchOutlined />\r\n                                    </Button>\r\n                                </div>\r\n                                <div className=\"box-tool\" style={{margin: '0 15px'}}>\r\n                                    <Badge count={quantity}>\r\n                                        <Button onClick={onShowModalCard}>\r\n                                            <ShoppingOutlined />\r\n                                        </Button>\r\n                                    </Badge>\r\n                                </div>\r\n                                <div className=\"box-tool\">\r\n                                    <Button>\r\n                                        <UserOutlined />\r\n                                    </Button>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n                    <div className={`${isMenuShow ? 'navbar-nav_mobile active' : 'navbar-nav_mobile'}`}>\r\n                        <Menu className='nav-list'>\r\n                            {\r\n                                categories.map((category, index) => {\r\n                                    return (\r\n                                        <>\r\n                                            <Menu.Item className='nav-list_item'>\r\n                                                <Link onClick={ () => setMenuShow(!isMenuShow)} to={`/collections/${Slug(category.name)}`}>{category.name.toUpperCase()}</Link>\r\n                                                <p>\r\n                                                    <Dropdown \r\n                                                        overlay={category.submenuM} \r\n                                                        trigger={['click']}\r\n                                                        visible={category.visible} \r\n                                                        onVisibleChange={category.action}\r\n                                                    >\r\n                                                        <DownOutlined />\r\n                                                    </Dropdown>\r\n                                                </p>\r\n                                            </Menu.Item>\r\n                                            {\r\n                                                index < categories.length - 1 ? <Divider /> : ''\r\n                                            }\r\n                                        </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Menu>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Affix>\r\n    )\r\n}\r\n\r\nexport default Navbar;","D:\\Pham Dinh Chinh\\kmon\\src\\pages\\home\\Home.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\components\\productsSlider\\ProductsSlider.js",["119"],"import { Col } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Product from '../product/Product'\r\nimport Slider from \"react-slick\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { sendProductsInCart } from '../../store/actions'\r\n\r\nconst ProductsSlider = (props) => {\r\n\r\n    const [slides, setSlides] = useState(4);\r\n    const dispatch = useDispatch();\r\n\r\n    const cartLocalStorage = useSelector(state => state.productsInCart);\r\n\r\n    const settings = {\r\n        dots: false,\r\n        infinite: false,\r\n        speed: 500,\r\n        slidesToShow: slides,\r\n        slidesToScroll: 1\r\n    };\r\n\r\n    const [products, setProducts] = useState(null);\r\n\r\n    const onAddToCart = product => {\r\n        if(cartLocalStorage[0]) {\r\n            let index = cartLocalStorage.findIndex(item => item.productId === product.productId)\r\n            if(index >= 0) {\r\n                cartLocalStorage[index] = {\r\n                    ...cartLocalStorage[index],\r\n                    quantity: cartLocalStorage[index].quantity + 1\r\n                }\r\n            } else {\r\n                cartLocalStorage.push(product)\r\n            }\r\n        } \r\n        if(!cartLocalStorage[0]) {\r\n            cartLocalStorage.push(product)\r\n        }\r\n        localStorage.setItem('cart', JSON.stringify(cartLocalStorage))\r\n        dispatch(sendProductsInCart(cartLocalStorage))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // set slides show\r\n        if(window.innerWidth >= 769) {\r\n            setSlides(4)\r\n        } else if(window.innerWidth >= 577 && window.innerWidth < 769) {\r\n            setSlides(3)\r\n        } else if(window.innerWidth < 577){\r\n            setSlides(2)\r\n        }\r\n        // end set lides show\r\n\r\n        if(props.children) {\r\n            const temp = props.children.map((product, index) => {\r\n                return (\r\n                    <Col key={index} lg={{span: 6}} md={{span: 8}} xs={{span: 12}}>\r\n                        <Product \r\n                            nameProduct={product.nameProduct}\r\n                            price={product.price}\r\n                            imgUrl={product.imgUrl}\r\n                            productId={product._id}\r\n                            category1={product.categories[0]}\r\n                            category2={product.categories[1]}\r\n                            category3={product.categories[2]}\r\n                            color={product.colors[0]}\r\n                            getProductId={onAddToCart}\r\n                        />\r\n                    </Col>\r\n                )\r\n            })\r\n            setProducts(temp)\r\n        }\r\n    }, [props.children])\r\n\r\n    return (\r\n        <Slider {...settings}>\r\n            {\r\n                products\r\n            }\r\n        </Slider>\r\n    )\r\n}\r\n\r\nexport default ProductsSlider;","D:\\Pham Dinh Chinh\\kmon\\src\\components\\product\\Product.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\RouterURL.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\components\\routes\\routes.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\pages\\login\\Login.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\pages\\products\\Products.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\pages\\signup\\SignUp.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\pages\\productDetail\\ProductDetail.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\components\\products\\Products.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\store\\store.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\showCartReducer.js",["120"],"const initialState = false\r\n\r\nexport default (state = initialState, { type }) => {\r\n    switch (type) {\r\n    case \"SHOW_CART_MODAL\":\r\n        return !state\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","D:\\Pham Dinh Chinh\\kmon\\src\\store\\actions.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\pages\\cart\\Cart.js",["121"],"import { DeleteOutlined } from '@ant-design/icons'\r\nimport { Button, Divider, List, Typography } from 'antd'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { showCartModal, sendPathProduct, sendProductsInCart } from '../../store/actions'\r\nimport './Cart.css'\r\nimport formatMoney from '../../common/formatMoney'\r\nimport Slug from '../../common/Slug'\r\n\r\nconst Cart = () => {\r\n    const dispatch = useDispatch();\r\n    const titleEmpty = 'Your cart is currently empty.';\r\n    const isShowCartModal = useSelector(state => state.showCartModal)\r\n    \r\n    const cart = useSelector(state => state.productsInCart)\r\n    const [products, setProducts] = useState([])\r\n\r\n    const onShowModalCard = useCallback(() => {\r\n        dispatch(showCartModal());\r\n    },[dispatch]);\r\n\r\n    const onClickLink = useCallback((path) => {\r\n        dispatch(sendPathProduct(path))\r\n        onShowModalCard();\r\n    }, [dispatch])\r\n\r\n    const onDecrease = productId => {\r\n        const index = cart.findIndex(item => item.productId === productId)\r\n        if(cart[index].quantity > 1) {\r\n            cart[index] = {\r\n                ...cart[index],\r\n                quantity: cart[index].quantity - 1\r\n            }\r\n        }\r\n        localStorage.setItem('cart', JSON.stringify(cart))\r\n        dispatch(sendProductsInCart(cart))\r\n    }\r\n    const onAddMore = productId => {\r\n        const index = cart.findIndex(item => item.productId === productId)\r\n        cart[index] = {\r\n            ...cart[index],\r\n            quantity: cart[index].quantity + 1\r\n        }\r\n        localStorage.setItem('cart', JSON.stringify(cart))\r\n        dispatch(sendProductsInCart(cart))\r\n    }\r\n\r\n    const onDeleteProduct = productId => {\r\n        const index = cart.findIndex(item => item.productId === productId)\r\n        cart.splice(index, 1)\r\n        localStorage.setItem('cart', JSON.stringify(cart))\r\n        dispatch(sendProductsInCart(cart))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setProducts([...cart]);\r\n    }, [cart])\r\n\r\n    const renderProducts = (products) => {\r\n        return products.map((product, index) => {\r\n            return (\r\n                <List.Item key={index} className='box-product'>\r\n                    <div className=\"box\">\r\n                        <Link \r\n                            to={`/collections/${product.category1}/${product.category2}/${product.category3}/${Slug(product.nameProduct)}.${product.productId}`} \r\n                            className=\"img-link\"\r\n                            onClick={() => onClickLink(`/collections/${product.category1}/${product.category2}/${product.category3}`)}\r\n                        >\r\n                            <img style={{width: '100%'}} alt='' src={product.imgUrl}/>\r\n                        </Link>\r\n                        <div className=\"box-name\">\r\n                            <Link \r\n                                to={`/collections/${product.category1}/${product.category2}/${product.category3}/${Slug(product.nameProduct)}.${product.productId}`} \r\n                                className=\"product-link\"\r\n                                onClick={() => onClickLink(`/collections/${product.category1}/${product.category2}/${product.category3}`)}\r\n                            >\r\n                                {product.nameProduct}\r\n                            </Link>\r\n                            <Typography.Text>\r\n                                {\r\n                                    product.color ? product.color : ''\r\n                                }\r\n                            </Typography.Text>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"box\">\r\n                        <div className=\"box-quantity active\">\r\n                            <div className=\"btn-add\" onClick={() => onDecrease(product.productId)}>-</div>\r\n                            <span>{product.quantity}</span>\r\n                            <div className=\"btn-add\" onClick={() => onAddMore(product.productId)}>+</div>\r\n                        </div>\r\n                        <Typography.Text className=\"price\">{formatMoney(product.price)} vnd</Typography.Text>\r\n                        <Button onClick={() => onDeleteProduct(product.productId)}>\r\n                            <DeleteOutlined />\r\n                        </Button>\r\n                    </div>\r\n                </List.Item>\r\n            )\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"box-cart\">\r\n            <Modal title=\"Shopping Cart\" visible={isShowCartModal} onCancel={onShowModalCard}>\r\n                <List>\r\n                    {\r\n                        products.length > 0 ? renderProducts(products)\r\n                                            :\r\n                                            <List.Item className=\"box-product\">\r\n                                                { titleEmpty }\r\n                                            </List.Item>\r\n                    }\r\n                    <Divider />\r\n                </List>\r\n                <div className=\"box-checkout\">\r\n                    <div className=\"total\">Subtotal <span>\r\n                        {\r\n                            formatMoney(products.reduce((acc, current) => acc + current.price * current.quantity, 0))\r\n                        }\r\n                    </span>vnd</div>\r\n                    <Button>\r\n                        CHECKOUT\r\n                    </Button>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport default Cart;","D:\\Pham Dinh Chinh\\kmon\\src\\components\\search\\Search.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\showSearchReducer.js",["122"],"const initialState = false\r\n\r\nexport default (state = initialState, { type }) => {\r\n    switch (type) {\r\n\r\n    case 'SHOW_SEARCH':\r\n        return !state\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","D:\\Pham Dinh Chinh\\kmon\\src\\common\\Slug.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\common\\formatMoney.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\common\\api\\productsAPI.js",[],"D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\sendPathProductReducer.js",["123"],"const initialState = null\r\n\r\nexport default (state = initialState, { type, pathProduct }) => {\r\n    switch (type) {\r\n\r\n    case 'SEND_PATH_PRODUCT':\r\n        return state = pathProduct\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","D:\\Pham Dinh Chinh\\kmon\\src\\reducers\\sendProductsInCartReducer.js",["124"],"const initialState = []\r\n\r\nexport default (state = initialState, { type, cart }) => {\r\n    switch (type) {\r\n\r\n    case 'SEND_PRODUCTS_CART':\r\n        return state = [...cart]\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n",{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":35,"column":11,"nodeType":"131","endLine":35,"endColumn":65},{"ruleId":"129","severity":1,"message":"132","line":49,"column":8,"nodeType":"133","endLine":49,"endColumn":10,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":379,"column":11,"nodeType":"131","endLine":379,"endColumn":65},{"ruleId":"129","severity":1,"message":"136","line":75,"column":8,"nodeType":"133","endLine":75,"endColumn":24,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":3,"column":1,"nodeType":"140","endLine":11,"endColumn":2},{"ruleId":"129","severity":1,"message":"141","line":27,"column":8,"nodeType":"133","endLine":27,"endColumn":18,"suggestions":"142"},{"ruleId":"138","severity":1,"message":"139","line":3,"column":1,"nodeType":"140","endLine":12,"endColumn":2},{"ruleId":"138","severity":1,"message":"139","line":3,"column":1,"nodeType":"140","endLine":12,"endColumn":2},{"ruleId":"138","severity":1,"message":"139","line":3,"column":1,"nodeType":"140","endLine":12,"endColumn":2},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","The 'cart' array makes the dependencies of useEffect Hook (at line 39) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'cart' in its own useMemo() Hook.","VariableDeclarator","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["145"],"The 'cart' array makes the dependencies of useEffect Hook (at line 383) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'cart' in its own useMemo() Hook.","React Hook useEffect has a missing dependency: 'onAddToCart'. Either include it or remove the dependency array.",["146"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useCallback has a missing dependency: 'onShowModalCard'. Either include it or remove the dependency array.",["147"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},"Update the dependencies array to be: [dispatch]",{"range":"154","text":"155"},"Update the dependencies array to be: [onAddToCart, props.children]",{"range":"156","text":"157"},"Update the dependencies array to be: [dispatch, onShowModalCard]",{"range":"158","text":"159"},[1581,1583],"[dispatch]",[2632,2648],"[onAddToCart, props.children]",[1055,1065],"[dispatch, onShowModalCard]"]